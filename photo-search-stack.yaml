AWSTemplateFormatVersion: '2010-09-09'
Description: Photo Search App Stack (Lambdas, API Gateway, S3 Buckets)

Resources:

  ## Lambda Execution Role ##
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                  - s3:PutObject
                Resource: "*"

  ## Storage S3 Bucket ##
  PhotoStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: photo-album-bucket-hetal-0427

  ## Frontend S3 Bucket ##
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: photo-album-frontend-hetal-0427
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      # AccessControl: PublicRead

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Sub "${FrontendBucket.Arn}/*"


  ## Lambda: index-photos ##
  IndexPhotosLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: index-photos
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        S3Bucket: photo-app-lambda-code-0427
        S3Key: index-photos.zip

  ## Lambda: search-photos ##
  SearchPhotosLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: search-photos
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        S3Bucket: photo-app-lambda-code-0427
        S3Key: search-photos.zip

  ## API Gateway ##
  PhotoSearchAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: photo-search-api

  ## /photos resource ##
  PhotoSearchAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt PhotoSearchAPI.RootResourceId
      PathPart: photos
      RestApiId: !Ref PhotoSearchAPI

  ## PUT /photos/{object} method (fixed!) ##
  UploadPhotoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PhotoSearchAPI
      ResourceId: !Ref PhotoSearchAPIResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: PUT
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:s3:path/${PhotoStorageBucket}/{object}
        PassthroughBehavior: WHEN_NO_MATCH
      RequestParameters:
        method.request.path.object: true

  ## /search resource ##
  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt PhotoSearchAPI.RootResourceId
      PathPart: search
      RestApiId: !Ref PhotoSearchAPI

  ## GET /search method ##
  SearchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PhotoSearchAPI
      ResourceId: !Ref SearchResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchPhotosLambda.Arn}/invocations

  ## Permission for API Gateway to call Search Lambda ##
  SearchLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SearchPhotosLambda
      Principal: apigateway.amazonaws.com

Outputs:
  FrontendWebsiteURL:
    Description: "Frontend S3 Bucket Website URL"
    Value: !Sub "http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com"
